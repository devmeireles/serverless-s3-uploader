service: file-server-development

plugins:
  - serverless-bundle
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  region: sa-east-1
  imageUploadBucket: file-server-development-c70013f2-4145-6b24774bf48c
  environment: ${file(./env.yml):${self:custom.stage}, file(./env.yml):default}

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.region}
  apiGateway:
    binaryMediaTypes:
      - "multipart/form-data"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        - arn:aws:s3:::*

  environment:
    stage: ${self:custom.stage}
    region: ${self:custom.region}
    imageUploadBucket: ${self:custom.imageUploadBucket}
    awsLocalDynammoAccessKey: ${self:custom.environment.awsLocalDynammoAccessKey}
    awsLocalDynammoSecretAccessKey: ${self:custom.environment.awsLocalDynammoSecretAccessKey}

functions:
  uploadFile:
    handler: api/controllers/FileController.uploadFile
    events:
      - http:
          method: post
          path: upload
          cors: true

resources:
  Resources:
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
        AccessControl: PublicRead
